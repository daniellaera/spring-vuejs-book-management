name: Deploy Spring and VueJS App

on:
  push:
    branches: [ main ]

permissions:
  contents: write
  packages: write  # Required for GHCR

jobs:
  deploy:
    name: Deploy App
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'

  build-and-test-backend:
    name: Build and Test Application (Backend)
    runs-on: ubuntu-latest
    needs: deploy
    if: ${{ needs.deploy.outputs.backend == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Build and Test Backend
        working-directory: ./backend
        run: mvn clean verify

      - name: Configure Maven Settings
        run: |
          mkdir -p ~/.m2
          echo "${{ secrets.MAVEN_SETTINGS_XML }}" | base64 --decode > ~/.m2/settings.xml

      - name: Set release version
        working-directory: ./backend
        run: mvn versions:set -DnewVersion=1.0.${{ github.run_number }}

      - name: Deploy to Nexus
        working-directory: ./backend
        run: mvn clean deploy -Prelease

      - name: Upload JaCoCo Coverage Report (Backend)
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report-backend
          path: |
            backend/target/site/jacoco/jacoco.csv
            backend/target/site/jacoco/jacoco.xml
            backend/target/site/jacoco/index.html

      - name: Generate JaCoCo Badge (Backend)
        id: generate_badge_backend
        uses: cicirello/jacoco-badge-generator@v2
        with:
          jacoco-csv-file: backend/target/site/jacoco/jacoco.csv
          badges-directory: .github/badges
          generate-coverage-badge: true
          coverage-badge-filename: jacoco.svg
          generate-coverage-endpoint: true
          coverage-endpoint-filename: jacoco.json

      - name: Commit and push badges to badges branch (Backend)
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          # Create or switch to the badges branch
          git checkout -B badges  
          
          # Ensure badges directory exists
          mkdir -p badges
          
          # Copy generated badge files
          cp .github/badges/jacoco.svg badges/
          cp .github/badges/jacoco.json badges/

          # Stage and commit changes
          git add badges/*
          git commit -m "Update JaCoCo coverage badges" || echo "No changes to commit"
          git push origin badges --force  # Push to badges branch

  build-and-test-frontend:
    name: Build and Test Application (Frontend)
    runs-on: ubuntu-latest
    needs: deploy
    if: ${{ needs.deploy.outputs.frontend == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run Vitest Tests
        working-directory: ./frontend
        run: npm run test

  dockerize-and-deploy:
    name: Build Images & Deploy to VPS
    runs-on: ubuntu-latest
    needs: [ build-and-test-backend, build-and-test-frontend ]
    steps:
      - uses: actions/checkout@v4

      # ⚠️ Decode Maven settings and place inside backend context for Dockerfile use
      - name: Prepare Maven settings for Docker
        run: |
          mkdir -p backend/.m2
          echo "${{ secrets.MAVEN_SETTINGS_XML }}" | base64 --decode > backend/.m2/settings.xml

      - name: Set up QEMU for multi-arch
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Backend Image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          platforms: linux/amd64
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ghcr.io/daniellaera/book-backend:latest

      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true
          tags: |
            ghcr.io/daniellaera/book-frontend:latest

      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.VPS_SSH_PORT }}
          script: |
            cd /srv/app-book-dev
            docker pull ghcr.io/daniellaera/book-backend:latest
            docker pull ghcr.io/daniellaera/book-frontend:latest
            docker compose down || true
            docker compose up -d
            docker image prune -f